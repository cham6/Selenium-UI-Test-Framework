package com.gurukula.testgurukula.tests;

/**
 * Copyright (c) 2019, ChamLabs.
 * Responsible: Chandra.Sekhar.Muttineni
 * @author https://github.com/cham6
 * @email: paperplanes.chandra@gmail.com
 * @fork: https://github.com/cham6/TestAutomationFrameworkForGurukula
 */

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.gurukula.testgurukula.pages.StaffPage;
import com.gurukula.testgurukula.testData.DataProviders;
import com.gurukula.testgurukula.util.TestUtil;
import com.gurukula.testgurukula.implementations.TestBaseImpl;
import com.gurukula.testgurukula.pages.BranchPage;
import com.gurukula.testgurukula.pages.LoggedInPage;
import com.gurukula.testgurukula.pages.LoginPage;

/**
 * Test class to test all the scenarios on Staff page.
 * @author Chandra.Sekhar.Muttineni
 *
 */

public class TestStaffPage extends TestBaseImpl{
	
	StaffPage staffPage;
	BranchPage branchPage;
	LoginPage loginPage;
	LoggedInPage loggedInPage;
	WebDriver driver;
	
	String staffContext = "Staff";
	String branchContext = "Branch";
	String staffName = "STAFFNAME";
	String relatedBranchName = "STAFFBRANCH";
	String relatedBranchCode = "BRANCHCODE";
	
	String staffNameEdited = "EDITEDSTAFF";
	
    @BeforeMethod
    public void setUp() {
    	super.setUp();
    	driver = new FirefoxDriver();
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        TestUtil.loginAndNavigateToContext(driver, branchContext);
        
        branchPage = new BranchPage(driver);
        branchPage.createNewBranch(relatedBranchName, relatedBranchCode);
        
        TestUtil.loginAndNavigateToContext(driver, staffContext);
        staffPage = new StaffPage(driver);
    }

    /**
     * Test new staff creation using valid data
     * @param staffName
     * @param staffBranchCode
     */
    @Test(dataProviderClass = DataProviders.class, dataProvider="ValidStaffDataProvider")
    public void testNewStaffCreationSuccessful(String staffName, String staffBranchCode) {
    	try {
	    	staffPage.createNewStaff(staffName, relatedBranchName);
	    	Assert.assertTrue(staffPage.isViewStaffSuccessful(staffName, relatedBranchName));	    	
    	} catch(Exception e) {
			System.out.println("Failed to create a new Staff.");
			e.printStackTrace();
			Assert.fail("Test failed due to some exception");
		}
    }
    
    /**
     * Test new staff creation using invalid data.
     * @param staffName
     * @param staffBranchCode
     */
    @Test(dataProviderClass = DataProviders.class, dataProvider="InvalidStaffDataProvider")
    public void testNewStaffCreationFailure(String staffName, String staffBranchCode) {
    	try {
	    	staffPage.createNewStaff(staffName, relatedBranchName);
	    	Assert.assertFalse(staffPage.isSaveEnabled());
	    	staffPage.cancelNewStaffWizard();
	    	Assert.assertFalse(staffPage.isViewStaffSuccessful(staffName, relatedBranchName));	    	
    	} catch(Exception e) {
			System.out.println("Failed in testNewBranchCreationFailure test");
			e.printStackTrace();
			Assert.fail("Test failed due to some exception");
		}
    }
 
    /**
     * Test the view functionality for New staff
     */
    @Test
    public void testViewActionOnNewStaff() {
    	try {
	    	staffPage.createNewStaff(staffName, relatedBranchName);
	    	Assert.assertTrue(staffPage.isViewStaffSuccessful(staffName, relatedBranchName));
    	} catch(Exception e) {
			System.out.println("'Save button is not enabled");
			e.printStackTrace();
			Assert.fail("Test failed due to some exception");
		}
    }
  
    /**
     * Test the Edit functionality for new staff
     */
    @Test
    public void testEditActionOnNewStaff() {
    	try {
	    	staffPage.createNewStaff(staffName, relatedBranchName);
	    	Assert.assertTrue(staffPage.isEditStaffSuccessful(staffName, relatedBranchName, 
	    			staffNameEdited, relatedBranchName));
    	} catch(Exception e) {
			System.out.println("'Exception in test testEditActionOnNewBranch");
			e.printStackTrace();
			Assert.fail("Test failed due to some exception");
		}
    }
    
    /**
     * Test the delete functionality for new staff
     */
    @Test
    public void testDeleteActionOnNewStaff() {
    	try {
	    	staffPage.createNewStaff(staffName, relatedBranchName);
	    	Assert.assertTrue(staffPage.isDeleteStaffSuccessful(staffName, relatedBranchName), 
	    			"The deleted Staff has found during search");
    	} catch(Exception e) {
			System.out.println("'Exception in test testDeleteActionOnNewBranch");
			e.printStackTrace();
			Assert.fail("Test failed due to some exception");
		}
    }
 
    /**
     * Tear down method for cleanup after each test.
     */
    @AfterMethod
    public void tearDown() {
    	super.tearDown();
    	System.out.println("Dispose the WebDriver after each test run");
    	driver.quit();
    }
}
