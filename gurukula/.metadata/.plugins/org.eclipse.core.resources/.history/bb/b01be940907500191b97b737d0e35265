package com.gurukula.testgurukula.tests;

/**
 * Copyright (c) 2019, ChamLabs.
 * Responsible: Chandra.Sekhar.Muttineni
 * @author https://github.com/cham6
 * @email: paperplanes.chandra@gmail.com
 * @fork: https://github.com/cham6/TestAutomationFrameworkForGurukula
 */

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.gurukula.testgurukula.pages.staffPage;
import com.gurukula.testgurukula.testData.DataProviders;
import com.gurukula.testgurukula.util.TestUtil;
import com.gurukula.testgurukula.implementations.TestBaseImpl;
import com.gurukula.testgurukula.pages.LoggedInPage;
import com.gurukula.testgurukula.pages.LoginPage;

public class TeststaffPage extends TestBaseImpl{
	
	StaffPage staffPage;
	LoginPage loginPage;
	LoggedInPage loggedInPage;
	WebDriver driver;
	String context = "Staff";
	
    @BeforeMethod
    public void setUp() {
    	super.setUp();
    	driver = new FirefoxDriver();
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        TestUtil.loginAndNavigateToContext(driver, context);
        staffPage = new staffPage(driver);
    }

    @Test(dataProviderClass = DataProviders.class, dataProvider="ValidStaffDataProvider")
    public void testNewBranchCreationSuccessful(String staffName, String staffBranchCode) {
    	try {
	    	
	    	staffPage.createNewStaff(staffName, staffBranchCode);
	    	Assert.assertTrue(staffPage.isViewStaffSuccessful(staffName, staffBranchCode));	    	
    	} catch(Exception e) {
			System.out.println("Failed to create a new Staff.");
			e.printStackTrace();
			Assert.fail("Test failed due to some exception");
		}
    }
    
    @Test(dataProviderClass = DataProviders.class, dataProvider="InvalidStaffDataProvider")
    public void testNewBranchCreationFailure(String staffName, String staffBranchCode) {
    	try {
	    	staffPage.createNewStaff(staffName, staffBranchCode);
	    	Assert.assertFalse(staffPage.isSaveEnabled());
	    	staffPage.cancelNewStaffWizard();
	    	Assert.assertFalse(staffPage.isViewStaffSuccessful(staffName, staffBranchCode));	    	
    	} catch(Exception e) {
			System.out.println("Failed in testNewBranchCreationFailure test");
			e.printStackTrace();
			Assert.fail("Test failed due to some exception");
		}
    }
 
    @Test
    public void testViewActionOnNewBranch() {
    	try {
	    	staffPage.createNewStaff("CHAMSTAFFA", "EDITEDNAME");
	    	Assert.assertTrue(staffPage.isViewStaffSuccessful("CHAMSTAFFA", "EDITEDNAME"));
    	} catch(Exception e) {
			System.out.println("'Save button is not enabled");
			e.printStackTrace();
			Assert.fail("Test failed due to some exception");
		}
    }
  
    @Test
    public void testEditActionOnNewBranch() {
    	try {
	    	staffPage.createNewStaff("CHAMSTAFFB", "EDITEDNAME");
	    	Assert.assertTrue(staffPage.isEditStaffSuccessful("CHAMSTAFFB", "EDITEDNAME", 
	    			"CHAMSTAFFC", "EDITEDNAME"));
    	} catch(Exception e) {
			System.out.println("'Exception in test testEditActionOnNewBranch");
			e.printStackTrace();
			Assert.fail("Test failed due to some exception");
		}
    }
    
    @Test
    public void testDeleteActionOnNewBranch() {
    	try {
	    	staffPage.createNewStaff("CHAMSTAFFN", "EDITEDNAME");
	    	Assert.assertTrue(staffPage.isDeleteStaffSuccessful("CHAMSTAFFN", "EDITEDNAME"), 
	    			"The deleted Staff has found during search");
    	} catch(Exception e) {
			System.out.println("'Exception in test testDeleteActionOnNewBranch");
			e.printStackTrace();
			Assert.fail("Test failed due to some exception");
		}
    }
 
    @AfterMethod
    public void tearDown() {
    	super.tearDown();
    	System.out.println("Dispose the WebDriver after each test run");
    	driver.quit();
    }
}
