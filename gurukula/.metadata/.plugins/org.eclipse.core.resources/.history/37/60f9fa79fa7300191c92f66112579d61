package com.gurukula.testgurukula.tests;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.gurukula.testgurukula.pages.StaffPage;
import com.gurukula.testgurukula.implementations.TestBaseImpl;
import com.gurukula.testgurukula.pages.LoggedInPage;
import com.gurukula.testgurukula.pages.LoginPage;

public class TestStaffPage extends TestBaseImpl{
	
	StaffPage StaffPage;
	LoginPage loginPage;
	LoggedInPage loggedInPage;
	WebDriver driver;
	
    @BeforeMethod
    public void setUp() {
    	super.setUp();
    	driver = new FirefoxDriver();
        driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        driver.get(loginUri);
    }

    @Test
    public void testNewBranchCreation() {
    	try {
    		loginAndNavigateToStaffPage();
	    	StaffPage = new StaffPage(driver);
	    	StaffPage.createNewStaff("CHAMSTAFF", "EDITEDNAME");
	    	Assert.assertTrue(StaffPage.isViewStaffSuccessful("CHAMSTAFF", "EDITEDNAME"));	    	
    	} catch(Exception e) {
			System.out.println("'Save button is not enabled");
			e.printStackTrace();
			Assert.fail("Test failed due to some exception");
		}
    }
 
    @Test
    public void testViewActionOnNewBranch() {
    	try {
    		loginAndNavigateToStaffPage();
	    	StaffPage = new StaffPage(driver);
	    	StaffPage.createNewStaff("VIEWNAME", "VIEWCODE");
	    	Assert.assertTrue(StaffPage.isViewStaffSuccessful("VIEWNAME", "VIEWCODE"));
    	} catch(Exception e) {
			System.out.println("'Save button is not enabled");
			e.printStackTrace();
		}
    }
  
    @Test
    public void testEditActionOnNewBranch() {
    	try {
    		loginAndNavigateToStaffPage();
	    	StaffPage = new StaffPage(driver);
	    	StaffPage.createNewStaff("EDITNAME", "EDITCODE");
	    	Assert.assertTrue(StaffPage.isEditStaffSuccessful("EDITNAME", "EDITCODE", 
	    			"EDITEDNAME", "EDITEDCODE"));
    	} catch(Exception e) {
			System.out.println("'Exception in test testEditActionOnNewBranch");
			e.printStackTrace();
		}
    }
    
    @Test
    public void testDeleteActionOnNewBranch() {
    	try {
    		loginAndNavigateToStaffPage();
	    	StaffPage = new StaffPage(driver);
	    	StaffPage.createNewStaff("DELETEBRANCH", "DELETECODE");
	    	Assert.assertTrue(StaffPage.isDeleteStaffSuccessful("DELETEBRANCH", "DELETECODE"), 
	    			"The deleted Branch has found during search");
    	} catch(Exception e) {
			System.out.println("'Exception in test testDeleteActionOnNewBranch");
			e.printStackTrace();
		}
    } 
   /** 
    @Test(dataProviderClass = DataProviders.class, dataProvider="InvalidLoginDataProvider")
    public void testGurukulaFailedLogin(String username, String password) {
    	loginPage = new LoginPage(driver);
    	loginPage.loginToGurukula(username, password);
    	Assert.assertTrue(loginPage.hasLoginFailed());
    }
 */
    @AfterMethod
    public void tearDown() {
    	super.tearDown();
    	System.out.println("Dispose the WebDriver after each test run");
    	driver.quit();
    	
    }
    
    private void loginAndNavigateToStaffPage()
    {
    	loginPage = new LoginPage(driver);
    	loginPage.loginToGurukula("admin", "admin");
    	Assert.assertTrue(loginPage.isLoginSuccessful());
    	
    	loggedInPage = new LoggedInPage(driver);
    	Assert.assertTrue(loggedInPage.isLoggedIn());
    	loggedInPage.clickEntities();
    	loggedInPage.clickStaff();
    }

}
